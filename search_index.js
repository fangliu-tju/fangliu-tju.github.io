var documenterSearchIndex = {"docs":
[{"location":"ch02/#变量、表达式和语句","page":"第二章 变量、表达式和语句","title":"变量、表达式和语句","text":"","category":"section"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"编程语言最重要的一个特征是可以对变量进行操作。通俗一点说，变量就是对所引用的值进行了命名。如同人生下来要起一个名字一样，无非是使用起来更方便些。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"","category":"page"},{"location":"ch02/#赋值语句","page":"第二章 变量、表达式和语句","title":"赋值语句","text":"","category":"section"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"赋值语句可用于创建新变量，并为该变量赋值：","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"julia> message = \"你是如此与众不同\"\n\"你是如此与众不同\"\njulia> n = 17\n17\njulia> π_val = 3.141592653589793\n3.141592653589793","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"这个例子进行了三次赋值操作。第1行将一个字符串赋给了一个名为 message 的变量；第3行将整数 17 赋给变量 n；第5行将pi的近似值赋给 π_val（\\piTab_val）。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"在纸上表示变量的一个常用方法是用箭头将变量名指向它的值。这种类型的图叫做状态图，它表明了每个变量所处的状态。下图展示了前述例子的结果。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"(Image: 变量的状态图)","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"","category":"page"},{"location":"ch02/#变量名","page":"第二章 变量、表达式和语句","title":"变量名","text":"","category":"section"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"在程序中，变量名的选取应具有一定的含义——通常它应该能表明变量具体指代了什么。变量名的长度不受限制。它可以包含几乎所有 Unicode 字符，但变量不能以数字开头。变量名可以使用大写字母，但大多数程序员喜欢只使用小写字母表示变量名。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"在Julia REPL中，Unicode字符可以通过使用类似于$ \\LaTeX$ 缩写形式，加Tab键输入（例如圆周率pi可通过 \\piTab命令实现）。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"名字中可出现下划线，_。它通常用于变量名由多个单词组成的情况下。例如 your_name 或 airspeed_of_unladen_swallow。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"如果你指定的变量名违反了变量的命名规则，Julia会提示语法错误：","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"julia> 76trombones = \"big parade\"\nERROR: syntax: \"76\" is not a valid function argument name\njulia> more@ = 10000\nERROR: syntax: extra token \"@\" after end of expression\njulia> struct = \"Advanced Theoretical Zymurgy\"\nERROR: syntax: unexpected \"=\"","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"76trombones 非法是因为它由数字开头。more@ 非法是因为它包含非法字符，@。但为什么 struct 也是错误的？原因在于 struct 是Julia的关键字。Julia使用关键字来识别程序的结构，因此不能将其作为变量名使用。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"Julia有如下关键字：","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"baremodule  begin   break       catch   const       continue\ndo                      else      elseif        end      export     false \nfinally               for        function  global if                import \nlet                      local    macro       module                quote\nreturn              struct  true            try                           using\nwhile ","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"还有一些关键字由两个单词组成：","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"abstract type   mutable struct   primitive type","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"两单词关键字中每个单词都可以用来作为变量名（但我不建议大家这样做）。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"还有三个关键字是作为中缀（一类运算符，出现在两个操作数之间，如 +，*）来使用的。同样，我不建议将它作为变量名：","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"where   in  isa","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"你不需要将这些关键字都记下来，在大多数开发环境中，关键字都会以不同的颜色显示，如果你想使用其中一个作为变量名，通过颜色你会识别出它是一个关键字。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"","category":"page"},{"location":"ch02/#表达式和语句","page":"第二章 变量、表达式和语句","title":"表达式和语句","text":"","category":"section"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"表达式是值、变量和运算符的组合。值本身就是一个表达式，变量也是如此，因此下面的表达式都是合法的：","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"julia> 42\n42\njulia> n\n17\njulia> n + 25\n42","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"当你在提示符后输入一个表达式，Julia对它进行求值，这意味着我们最终得到的是表达式的结果。上例中，n 的值是17，因此 n+25 的值是42。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"语句是能产生一定效果的程序单元，如创建一个变量或显示某个值。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"julia> n = 17\n17\njulia> println(n)\n17","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"第1行是一个赋值语句，其作用是将某个值赋给变量 n。第3行是一个打印语句，其作用是显示 n 的值。当你输入一条语句，Julia就会执行它，这意味着Julia会做语句所定义的事情。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"","category":"page"},{"location":"ch02/#脚本模式","page":"第二章 变量、表达式和语句","title":"脚本模式","text":"","category":"section"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"目前为止我们都是以交互模式来运行Julia的，这意味着你与REPL直接互动。交互模式对学习入门很有帮助，但是如果你要处理的不是简简单单的几行代码，使用交互模式就不太方便了。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"另外一种方法是将代码保存到一个叫做脚本的文件中，然后以脚本模式运行Julia来执行脚本。通常Julia脚本文件以后缀 .jl 结尾。大多数文本编辑器都可以用来编写Julia脚本，如Windows下的记事本，Linux下的nano等，我比较喜欢使用Visual Studio Code来编辑Julia脚本，包括大家看到的这本书，也是在该软件中编写的。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"Julia支持两种模式，你可以先在交互模式下测试你的代码片段，通过后再将其添加到脚本文件中。但交互模式和脚本模式有些不同，可能会给初学者造成一定的困惑。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"例如，如果你把Julia当做计算器使用，你可能会输入：","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"julia> miles = 26.2\n26.2\njulia> miles * 1.61\n42.182","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"第1行将一个值赋给 miles 并显示该值。第3行是一个表达式，Julia对它进行求值并显示结果。它表明马拉松的距离大约是42公里。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"现在创建一个脚本文件，假设文件名为 marathon.jl，把相同的代码放入这个脚本文件中：","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"miles = 26.2\nmiles * 1.61","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"将它保存到你指定的位置（如 D:\\juliatest 下，这里以Windows系统为例)，然后使用 PowerShell 或命令提示符通过命令行来执行脚本文件:","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"PS D:\\juliatest> julia marathon.jl\njulia : The term 'julia' is not recognized as the name of a cmdlet, \nfunction, script file, or operable program. Check the spelling of the name,\nor if a path was included, verify that the path is correct and try again.\nPS D:\\juliatest>","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"结果提示 julia 不是一个合法的命令。这是因为Julia在安装过程中没有默认将程序所在路径添加到系统搜索路径中，我们需要手动添加。方法是右击我的电脑，选择高级系统设置，环境变量(N)...，在用户环境变量或系统环境变量的 Path 中添加 %USERPROFILE%\\AppData\\Local\\Programs\\Julia\\Julia-1.6.2\\bin 即可。重新启动 PowerShell，再次输入相同的命令：","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"PS D:\\juliatest> julia marathon.jl\nPS D:\\juliatest>","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"程序运行结束后你看不到任何输出结果。在脚本模式中表达式本身不产生任何可显示的效果。Julia实际上计算了表达式，但它不显示结果，除非你告诉它要这样做：","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"miles = 26.2\nprintln(miles * 1.61)","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"在交互模式下，我们也可以模拟类似于运行脚本文件所产生的效果：","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"julia> miles = 26.2;\njulia> miles * 1.61;","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"细心的读者应该已经注意到，我在赋值语句和表达式的后面都添加了一个分号(;)，它起到在交互模式下抑制显示返回结果的作用。实际上，在交互模式下，当你输入一条语句或表达式并回车后，REPL 将其分解为先计算值然后显示返回结果两个步骤：","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"julia> a = 1\n1\njulia> a = 1;\njulia> display(a);\n1","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"第1行命令等价于第3行和第4行两条命令之和。其中 display 是Julia的内置函数，它的作用是在当前输出设备上以最佳的方式显示结果。有了这些知识，你可以猜测到，在脚本模式下，Julia默认是不调用 display 函数的。实际情况也是如此。因此，在脚本模式下，语句或表达式后面一般不加分号，而当你想显示某些数据时，需要输入相应的命令。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"一个脚本中通常包含一系列语句。其运行机制是执行一条语句，返回一条结果，对于下例脚本：","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"println(1)\nx = 2\nprintln(x + 1)","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"其结果为：","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"1\n3","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"与我们分析的一样，赋值语句不显示结果。","category":"page"},{"location":"ch02/#习题2-1","page":"第二章 变量、表达式和语句","title":"习题2-1","text":"","category":"section"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"为了检验你对所学知识的理解，在Julia REPL中输入如下命令，看看结果与你预期是否相符：","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"5\nx = 5\nx + 1","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"现在将相同的命令输入到脚本中并运行，结果如何？对脚本进行修改，将每个表达式转换成打印语句，然后再次运行。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"","category":"page"},{"location":"ch02/#运算符优先级","page":"第二章 变量、表达式和语句","title":"运算符优先级","text":"","category":"section"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"当一个表达式包含多个运算符时，计算的顺序依赖于运算符优先级。对于数学运算符，Julia遵循数学运算法则：","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"括号的优先级最高，可强制表达式按你希望的顺序进行计算。由于括号中的表达式最先计算，所以 2*(3-1)等于4，(1+1)^(5-2)等于8。括号也可以用来增强表达式的可读性，如(minute*100)/60，虽然没有改变计算顺序，但使表达式的意义更加明确。\n幂指数的优先级次之，因此 1+2^3 等于9，而不是27，2*3^2 等于18，而不是36。\n乘除的优先级高于加减。因此 2*3-1 等于5，而不是4，6+4/2 等于8，而不是5。\n相同优先级的运算符从左到右计算（幂指数除外）。因此在表达式 degrees/2*π 中，先计算除法，然后将商乘以 π。如果想除以2pi，可以使用括号 degrees/(2*π)，或者写成 degrees/2/π，或者 degrees/2π。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"数字紧接变量名的写法是Julia所特有的语法规则，叫做数字乘法，表示数字和变量相乘，其作用体现在相同优先级的运算符中，优先计算数字乘法，如当 x=2 时，4/2x 等于1，而不是4；2x^3 等于16，而不是64。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"Julia提供了内置函数 Base.operator_precedence，可以查询任何运算符的优先级。其结果是一个整数，值越大，表明运算符的优先级越高，如果结果为0，则表明所查询的不是一个运算符：","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"julia> Base.operator_precedence(:+)\n11\njulia> Base.operator_precedence(:*)\n12\njulia> Base.operator_precedence(:sin)\n0","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"函数内以 : 开头的运算符或变量名属于Julia的一种数据类型，Symbol，我们还没有学习到。你可以暂时不用管它，只要记住在你查询的运算符前加上 : 就可以。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"","category":"page"},{"location":"ch02/#字符串运算","page":"第二章 变量、表达式和语句","title":"字符串运算","text":"","category":"section"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"一般来说，不能对字符串做数学运算，即便字符串看起来很像数字，下列运算也是非法的：","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"\"2\" - \"1\"   \"eggs\" / \"easy\"  \"third\" + \"a charm\"","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"但是有两个运算符除外，分别是 * 和 ^。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"* 运算符执行字符串拼接，其结果是将多个字符串首尾相连，如下例：","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"julia> first_str = \"throat\"\n\"throat\"\njulia> second_str = \"warbler\"\n\"warbler\"\njulia> first_str * second_str\n\"throatwarbler\"","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"^ 运算符也可以用于字符串，它执行重复运算。如 \"Spam\"^3 结果为\"SpamSpamSpam\"。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"不同语言对于字符串拼接符的定义是不同的，有许多语言用 + 实现拼接，* 实现循环拼接。从自然语义上理解，好像采用这两种运算符更加直观，但从数学定义上看，却会产生很大的歧义。如在线性代数中，加法满足交换律，即A+B=B+A，将其用在字符串拼接上，意味着 \"Hello\"+\"World\" 和 \"World\"+\"Hello\" 的结果是相同的，这明显是不合理的。矩阵乘法不满足交换律，即A*Bneq B*A，将这个运算规则运用在字符串拼接上显然更能满足运算符的一致性要求。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"","category":"page"},{"location":"ch02/#注释","page":"第二章 变量、表达式和语句","title":"注释","text":"","category":"section"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"随着程序越来越长，越来越复杂，阅读起来也变得更加困难。形式语言语义密度大，很难通过阅读一个程序片段就能搞清楚它是在做什么，或者为什么这样做。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"因此，通过对程序增加自然语言笔记来说明它到底做了些什么是一个非常明智的方法。这些笔记被称为注释，它们以 # 号开头：","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"# 计算已用时间的百分比（总时长是60分）\npercentage = (elapsed_minute * 100) / 60","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"在这个例子中，注释独占一行。你也可以将注释放到一行的末尾：","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"percentage = (elapsed_minute * 100) / 60  # 已用时间的百分比","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"# 号以后的所有内容都被程序忽略掉——它对程序的执行不起任何作用。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"注释对于说明没有明显特征含义的代码具有非常重要的作用。一般来说，我们可以认为读者能看懂程序做了些什么，我们要做的是解释为什么这么做。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"下面这段注释是多余无用的：","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"v = 5   # 将 5 赋给 v","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"下面这段注释提供了代码没有包含的有用信息：","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"v = 5   # 速度，单位：米/秒","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"好的变量名可以减少注释的使用，但过长的名字会使复杂的表达式难于阅读，在这其中要做合理的取舍。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"关于注释语言的选用，建议大家尽量用英语。因为一个大型的程序，往往是多人甚至是多国人合作的成果，因此你写的代码包括注释在内要让所有开发人员都看得懂。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"","category":"page"},{"location":"ch02/#调试","page":"第二章 变量、表达式和语句","title":"调试","text":"","category":"section"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"程序中可能出现的错误有三种：语法错误，执行错误和语义错误。有效地识别它们可使调试过程更加快速。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"语法错误 :   “语法”代表程序的结构以及这个结构要遵循的法则。例如括号必须成对出现，因此 (1+2) 是合法的，而 8)会报语法错误。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"程序中任何位置存在语法错误，Julia都会显示错误信息并退出，在没有改正错误前，程序不能正常运行。在开始接触程序的最初几周内，你也许会花大量的时间来处理语法错误。随着编程经验的增加，你产生的错误会越来越少，并且找到它们的速度会加快。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"执行错误 :   第二类错误是执行错误，之所以这样称它是因为这种错误直到程序开始运行时才会显现。这种错误也被称为异常，因为它通常表明发生了一些意想不到的事情（通常是坏的）。 ","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"执行错误很少出现在简单的程序中，因此我们可能会很长一段时间遇不到这种错误。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"语义错误 :   第三类错误是“语义错误”，它与程序要真正实现的内容有关。如果存在语义错误，程序在运行过程中不会产生错误信息，但程序的返回结果不是你所期待的。程序的确按照你的指令执行了一些计算，但那些并不是你本意要做的计算。 ","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"识别语义错误相对困难，因为代码有误的地方往往不是结果出错的地方。你需要从出现错误的地方开始向前寻找产生错误的程序代码。这往往需要你对计算机算法或者问题本身的相关背景知识有较深的理解。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"","category":"page"},{"location":"ch02/#术语","page":"第二章 变量、表达式和语句","title":"术语","text":"","category":"section"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"变量 : 指向某个值的名字。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"赋值 : 将某个值赋予变量的语句。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"状态图 : 变量及其所代表的值的图形化表示。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"关键字 : 保留字，其作用是用来解析程序；你不能使用诸如 if，function，while 等关键字作为变量名。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"运算数 : 运算符可作用的一个值。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"表达式 : 变量，运算符和值的组合，代表一个单一的结果。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"求值 : 通过运算来简化一个表达式，最终得到一个单一的结果。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"语句 : 代表一条指令或动作的代码段。目前我们接触到的语句有赋值语句和打印语句。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"执行 : 运行一条语句，实现其功能。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"交互模式 : 一种使用Julia REPL，在提示符后输入代码的方式。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"脚本模式 : 一种使用Julia从脚本中读取代码并运行的方式。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"脚本 : 存储在文件中的程序。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"运算优先级 : 规定表达式中多个运算符和操作数计算顺序的规则。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"拼接 : 将两个字符串首尾相连。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"注释 : 程序中为方便其他程序员（或任何阅读源程序的人）而提供的信息，对程序的执行不起任何作用。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"语法错误 : 程序中的一类错误，使程序不能被正确解析。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"执行错误或异常 : 在程序运行中识别出的错误。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"语义 : 代码的含义。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"语义错误 : 程序中的一类错误，使程序不是按照编程者的目的执行。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"","category":"page"},{"location":"ch02/#习题","page":"第二章 变量、表达式和语句","title":"习题","text":"","category":"section"},{"location":"ch02/#习题2-2","page":"第二章 变量、表达式和语句","title":"习题2-2","text":"","category":"section"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"重复上一章我给出的建议，当你学习一个新的特性，你应该在交互模式下做一些试验，并故意制造一些错误看看结果会怎样。","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"我们已经看到 n=42 是合法的。42=n 会怎样？\nx=y=1 会如何？\n在有些语言中，每条语句都是以分号，; 结尾。如果你在Julia语句后输入一个分号会怎样？\n如果在一条语句后输入一个句号会怎样？\n在数学表示中，你可以将 x 乘以 y 表示成 xy。如果你在Julia中这样做会怎样？对于 5x 呢？","category":"page"},{"location":"ch02/#习题2-3","page":"第二章 变量、表达式和语句","title":"习题2-3","text":"","category":"section"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"将Julia REPL当做计算器做如下练习：","category":"page"},{"location":"ch02/","page":"第二章 变量、表达式和语句","title":"第二章 变量、表达式和语句","text":"半径为r的球的体积为frac43pi r^3。半径为5的球的体积是多少？\n假设一本书的零售价是24.95元，书店可以获得40%的折扣。第一本书的运输费用是3元，每增加一本运费增加0.75元。书店批发60本书的成本是多少？\n如果我上午6:52离开家，慢跑1公里（每公里5分9秒），然后快跑3公里（每公里4分28秒），然后再慢跑1公里到家，我到家的时间是几点？   ","category":"page"},{"location":"ch01/#程序设计与Julia","page":"第一章 程序设计与Julia","title":"程序设计与Julia","text":"","category":"section"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"本书的目标是使你能够像计算机学家一样思考问题。这一思考方式集成了数学、工程以及自然科学的一些最优秀的特点。计算机学家要像数学家一样使用形式语言来表达思想（具体来说是计算）；像工程师一样设计产品，将零件组成系统，在各种选择之间寻求平衡；像科学家一样观察复杂系统的行为，形成假设并且对预测进行检验。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"对于计算机学家，最重要的技能是问题求解能力。问题求解意味着对问题进行形式化，寻求创新性的解决方案，并且清晰、准确地表达解决方案的能力。事实证明，学习编程的过程是锻炼问题求解能力的一个绝佳机会。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"一方面，你将学习如何编程，这本身就是一个有用的技能。另一方面，你将把编程作为实现自己目的的手段。随着学习的深入，你会更清楚自己的目标。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"","category":"page"},{"location":"ch01/#Julia概述","page":"第一章 程序设计与Julia","title":"Julia概述","text":"","category":"section"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"Julia是2012年诞生于麻省理工学院的一种开源通用编程语言。它具有如下特点：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"Julia是一种高性能计算编程语言。\nJulia使用多分派技术来提高编程体验和程序运行效率。\nJulia是一种可交互的动态编程语言。\nJulia的语法规则简单易学。\nJulia可以通过提供类型限定来提高程序的清晰性和稳健性。\nJulia有一个不断扩大的标准库和大量的第三方程序包。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"","category":"page"},{"location":"ch01/#什么是程序？","page":"第一章 程序设计与Julia","title":"什么是程序？","text":"","category":"section"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"程序是详细说明如何执行计算的一系列指令的集成。这里的计算可以是数学中解方程组或者寻找多项式的根；也可以是在一个文档中寻找和替换某些文字；亦或处理一张图片、播放一段视频。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"不同编程语言的细节虽有所不同，但每种语言都共同包含一些基本的指令：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"输入 :   从键盘、文件、网络或其他设备上获取数据。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"输出 :   在屏幕上显示数据，将数据存入文件或通过互联网传输，等等。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"数学 :   执行基本的数学运算，如加、减、乘、除等。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"分支 :   进行条件判断，选择相应的代码执行。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"循环 :   重复执行某些活动，通常在每次执行过程中会做微小的变化。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"不管你相信与否，计算机编程的全部内容就是这些。我们所使用的每种程序语言，不管有多复杂，都是由上面那些指令组成的。因此，你可以把编程理解为将一个庞大复杂的任务分解为越来越小的子任务，这个过程不断重复，直到分解的子任务简单到可以用上面介绍的基本指令中的一个实现为止。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"","category":"page"},{"location":"ch01/#运行Julia","page":"第一章 程序设计与Julia","title":"运行Julia","text":"","category":"section"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"Julia是一个跨平台应用，安装起来非常容易，不管你是使用Windows、Linux还是macOS系统，都可到 Julia官方网站下载安装。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"Julia有自己的图形窗口REPL（读取-求解-打印-循环），可对程序进行读取和执行。你可以通过桌面快捷图标、程序菜单或命令行来启动这个程序，当程序启动后，你将看到如下界面：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"(Image: Julia启动界面)","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"最后一行 julia> 为命令提示符，它的出现表明Julia程序正常启动并进入到REPL，等待你输入代码。成功安装Julia软件后，我们需要对开发环境做一个简单的配置，以使你在Julia中的输入和输出看起来与书中的结果相一致（可能会有细微的差别）。在 julia> 提示符后输入如下命令：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"julia> using Pkg\njulia> Pkg.add(\"OhMyREPL\")\n  Updating registry at `~/.julia/registries/General`\n  Updating git-repo `https://github.com/JuliaRegistries/General.git`\njulia> using OhMyREPL","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"大家可以先不用关心每条语句的具体含义，后面会逐步学到。配置完成后，如果你输入一行代码并按回车，REPL将显示结果：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"julia> 1 + 1\n2","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"现在你已经知道如何启动Julia程序了。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"另外一点需要说明的是，每次重新启动Julia程序后都要首先输入using OhMyREPL语句，这显然很麻烦。一个解决方案是可以将这条语句放入Julia启动文件startup.jl中。这样，Julia在启动时就会自动调用这条语句。以Windows系统为例，startup.jl文件位于%USERPROFILE%/.julia/config/中，如果该目录下没有startup.jl文件或.julia目录中没有config目录，则可以自己创建一个。在下载程序包时，遇下载速度很慢的情况，可以将Julia 镜像切换为国内镜像源，方法是在startup.jl文件中添加一条命令：ENV[\"JULIA_PKG_SERVER\"]=\"https://mirrors.bfsu.edu.cn/julia/static\"。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"","category":"page"},{"location":"ch01/#第一个程序","page":"第一章 程序设计与Julia","title":"第一个程序","text":"","category":"section"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"一般来说，当你学习一门新语言时写的第一个程序通常为\"Hello, World!\"，它唯一的作用是在屏幕上输出一串文字\"Hello, World!\"。在Julia中，它看起来像这样：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"julia> println(\"Hello, world!\")\nHello, World!","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"尽管它只是在屏幕上显示了结果而没有在纸上打印任何东西，但这确实是打印语句的一个实例。程序中双引号不出现在结果中，它表示所要显示文字内容的开始和结束。括号表明println是一个函数。现在不理解函数的具体用法也没有关系，我们将在第三章中学习函数。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"","category":"page"},{"location":"ch01/#算术运算符","page":"第一章 程序设计与Julia","title":"算术运算符","text":"","category":"section"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"紧接着\"Hello, World!\"要学习的是算术运算。Julia提供的运算符是一种能够代表诸如加、减、乘、除一类计算的符号。运算符+，-和*分别执行加，减和乘，如下例所示：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"julia> 40 + 2\n42\njulia> 43 - 1\n42\njulia> 6 * 7\n42","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"运算符/执行除法：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"julia> 84 / 2\n42.0","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"你也许会发现，结果是42.0，而不是42。我将在下节解释其原因。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"运算符^执行幂计算，即乘方运算：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"julia> 6^2\n36","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"","category":"page"},{"location":"ch01/#值和类型","page":"第一章 程序设计与Julia","title":"值和类型","text":"","category":"section"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"值，例如一个字母或一个数字，是程序要处理的基本元素之一。目前我们所见到的值有2，42.0和\"Hello, World!\" 等。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"这些值属于不同的类型：2为整数，42.0为浮点数，\"Hello, World!\"为字符串，字符串得名于其有序排列的字母好像被绳子穿成了一串。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"如果你不能确定值的类型，可在REPL中输入如下命令：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"julia> typeof(2)\nInt64\njulia> typeof(42.0)\nFloat64\njulia> typeof(\"Hello, World!\")\nString","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"整数属于Int64类型，浮点数属于Float64类型，字符串属于String类型。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"值\"2\"和\"42.0\"属于什么类型？虽然它们看起来像数字，但由于它们被置于双引号中，因此是字符串，见下例：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"julia> typeof(\"2\")\nString\njulia> typeof(\"42.0\")\nString","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"当你输入一个比较大的整数时，你可能习惯于使用逗号将数字分组，如1,000,000。在Julia中，采用这种方法表示整数是非法的，但就其表示本身而言确是合法的：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"julia> 1,000,000\n(1, 0, 0)","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"这不是我们想要的结果。Julia将1,000,000解析为用逗号分隔的整数序列。我们将在第十二章学习这种类型的序列。我们可以使用1_000_000来得到我们想要的结果：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"julia> 1_000_000\n1000000","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"","category":"page"},{"location":"ch01/#形式语言和自然语言","page":"第一章 程序设计与Julia","title":"形式语言和自然语言","text":"","category":"section"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"自然语言是人们日常交流使用的语言，如英语，西班牙语，法语，汉语等。它们不是人为设计（尽管有人试图这样做，但并不成功，可参考世界语）的，而是自然进化的结果。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"形式语言是人们为了实现某些特殊应用而设计的语言。例如数学家用数学符号表示数量和符号中的相互关系。化学家使用化学符号来表示分子结构。这些语言都是各自领域内的形式语言。同样，编程语言是一种设计用来表达计算的形式语言。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"形式语言一般具有严格的语法规则来限制语句结构。例如，3+3=6是语法正确的数学表达式，而3+=36则不是\\rm{H2O}是语法正确的化学式而\\rm{2Zz}则不是。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"语法规则包含两方面内容：标识和结构。标识是语言的基本组成单位，如文字、数字、化学元素等。3+=36在语法是错误的原因之一在于在数学语言中$是非法标识（至少一般情况下是这样的）。同样，在化学语言中，没有以缩写rmZz表示的元素。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"语法规则的第二条内容是有关标识的组合方式。方程3+=3在语法上是错误的，尽管+，=都是合法的标识，但却不允许这两个标识连接到一起使用。类似地，在化学公式中，下标只能出现在元素名的后面，而不是前面。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"该句子结构:+1:，但标识:-1:。 正确该句子标识，但错误结构。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"当你用汉语阅读一个句子或用形式语言阅读一条命令时，你必须要识别出它们各自的结构（尽管在自然语言中，我们是下意识地做了这件事）。这个过程称为解析。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"尽管形式语言和自然语言有许多共同的特点——标识，结构和语法——但它们有如下不同：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"歧义 :   自然语言充满了歧义，人们通过上下文线索和其他信息来对真正的语义进行判断。形式语言被设计成几乎或完全没有歧义，这意味着任何语句都有一个非常明确的含义，而这个含义与上下文无关。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"冗余 :   自然语言为了消除歧义，减少误解，使用了大量冗余的表达方法，常表现为句子很长。形式语言很少有冗余，因此很简洁。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"字面性 :   自然语言充满了成语和比喻。如果我说“靴子落地了”。通常情况下，这里并不存在一双靴子，也没有什么东西落到了地上（这个习语表现了人们对于某一急切、观望的事件，终于有了结果）。而对形式语言来说，它要表达的就是一双（只）靴子落到了地面上。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"由于我们从小就说自然语言，因此有时很难适应形式语言。自然语言与形式语言的区别就像诗歌与散文的区别，但又更加明显：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"诗歌 :   文字既要考虑含义又要考虑韵律，整首诗通过义韵相互配合创造了一种意境或反映了一种情感。歧义不仅常见，而且往往是刻意营造的。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"散文 :   词义、句式更加重要。相较于诗歌，散文更容易分析，但往往也存在歧义。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"程序 :   计算机程序所表达的含义是字面上的、无歧义的，可以完全通过对标识和结构的分析来明确。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"形式语言的语义密度比自然语言高，因此需要花更多的时间理解。另外，其结构也很重要，有时从上往下，从左往右地阅读程序不是一个很好的选择。相反，你要学会在头脑中解析程序，识别出各种标识和语法结构。最后，细节很重要，在自然语言中，一些拼写和标点错误并无大碍，但在形式语言中可能会引起巨大的差异。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"","category":"page"},{"location":"ch01/#计算机中数字的存储与运算","page":"第一章 程序设计与Julia","title":"计算机中数字的存储与运算","text":"","category":"section"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"在 Julia 中，如果你输入(sqrt3)^2，结果将是 2.9....96，其中 9 重复了 15 次。相比与传统的数学运算，计算机的运算方式有两个明显且本质的区别:","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"计算机只能表示有限数量的数字;\n计算机中表示的一个数字只能有有限多个有效数字。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"因此，能够在计算机中精确表示的数字只是有理数的一个子集。每当计算机执行一个运算，当结果不是一个可以在计算机中精确表示的数字时，就会用一个近似值来代替这个精确的数字。这被称为舍入误差：用计算机进行实数计算时产生的错误。","category":"page"},{"location":"ch01/#实数的浮点表示方法","page":"第一章 程序设计与Julia","title":"实数的浮点表示方法","text":"","category":"section"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"下面是在计算机中表示实数的一般模型：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"x=s(a_1a_2a_t)_betatimesbeta^e tag1","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"其中","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"beginalign*\ns   x=1 的符号 2ex \ne   指数范围为LeU 2ex \n(a_1 a_t)_beta  = dfraca_1beta+dfraca_2beta^2+cdots+dfraca_tbeta^t尾数 2ex\nβ   基数 2ex\nt   有效数字个数精度 \nendalign*","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"在浮点表示法(1)中，如果我们以这样一种方式指定e，即a_1 0，那么表示将是唯一的。这称为规格化的浮点表示法。例如，如果β = 10，在规格化的浮点数中，我们将把0012写成012  10^1，而不是0012  10^0或00012  10^1。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"在当今大多数计算机中，基数是β = 2。过去老式的IBM大型机中曾使用过基数8和16。一些手持计算器使用基数10。莫斯科国立大学开发的Setun计算机，使用的基数是3，但并没有得到广泛推广。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"对于s，β，t，e的值，在一般浮点模型(1)中有多种选择。IEEE 64位浮点表示是当今大多数计算机中使用的特定模型：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"x=(-1)^s(1a_2a_3 a_53)_2 2^e-1023 tag2","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"注意在方程(1)和(2)中s的不同表现形式。在(2)中，s为0或1。s = 0，x是正的；s = 1, x是负的。\n由于β = 2，在x的规格化的浮点表示中，小数点后的第一个(非零)位必然是1。因此我们不需要存储这个数字。这就是为什么在(2)中我们把x写成从1开始的小数。即使精度是t = 52，我们也能够访问到第53位有效数字a_53。\n指数的范围是:0e2047。稍后会讨论2047的来源。但首先，我们讨论一下为什么在(2)表示法中我们用e - 1023作为指数，而不是简单地用e(在(1)表示法中)作为指数。如果最小的可能指数是e = 0，那么计算机能生成的最小正数将是(1000)_2 = 1：当然，我们需要计算机来表示小于1的数字！这就是为什么我们在表示(2)中使用称为有偏指数的移位表达式e - 1023。注意，有偏指数的范围是- 1023e - 10231024。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"下图说明了计算机的物理位如何与上面的表示相对应。下表中编号为1到64的每个单元对应于计算机内存中的物理位。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"(Image: Physical bits)","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"第一位是符号位：它存储s的值，0或1。\n蓝色的2到12位存储指数e(不是e1023)。使用11位，可以生成从0到2^111 = 2047的整数。下面是如何得到e的最小值和最大值：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"$","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"e=(00...0)2=0 \\[1ex]  e=(11...1)2 =2^0+2^1+...+2^{10}=\\dfrac{2^{11}-1}{2-1}=2047 $","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"红色的52位，存储有效数字a_2到a_53。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"例1：求10.375的浮点表示形式。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"解： 通过计算 10=0times2^0+textcolorblue1 2^1 + textcolorgreen0times2^2+textcolorred1times2^3 和 0375=0times2^-1+textcolorblue1times2^-2+textcolorgreen1times2^-3 可以得到 10=(textcolorred1textcolorgreen0textcolorblue10)_2 和 0375=(0textcolorblue1textcolorgreen1)_2。最终得到：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"10375=(1010011)_2=(1010011)_2times2^3","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"式中(1010011)_2  2^3为该数字的规格化的浮点表示。现在我们将其改写为式(2)的表示形式：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"10375=(-1)^0(1010011)_2times2^1026-1023","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"由于1026 =(10000000010)_2，按位表示的最终结果为：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"(Image: 基于10的数)","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"注意因为数字是正数，第一个符号位是0。接下来的11位(蓝色)代表指数e = 1026，下一组红色的位是尾数，尾数的最末一位有效数字以后用0填充。在Julia中，我们可以通过输入bitstring(10.375)来逐位表示：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"julia> bitstring(10.375)\n\"0100000000100100110000000000000000000000000000000000000000000000\"","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"特殊情况：0，无穷，非数","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"在浮点算术中有两个零：+00和00，它们有特殊的表示。在表示0时，所有的指数位和尾数位都设置为0。符号位是0的代表+00，1的代表00：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"(Image: zeros)","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"当指数位设置为0时，我们有e = 0，因此e1023 =1023。这种将所有指数位设置为零的情况，是为00和非规格化数字保留的。非规格化数用来表示靠近0的数或0。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"下面是计算机中正负无穷数的表示方法：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"(Image: 正负无穷数)","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"当指数位全设置为1时，我们有e = 2047，因此e1023 = 1024。这种安排是专门为以及其他特殊值，如NaN(非数)保留的；当尾数等于0时表示无穷大，尾数不等于0时表示非数。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"综上所述，尽管(2)中的1023e10231024，但在表示非零实数时，我们只能访问1022e10231023的指数范围。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"因此，计算机可以表示的最小正实数（非规格化）为：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"x=(-1)^0(0001)_2times2^-1022=2^-52times2^-1022=50times10^-324","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"最大正实数（规格化）为：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"x=(-1)^0(1111)_2times2^1023=left(1+dfrac12+dfrac12^2++dfrac12^52 right)times2^1023=(2-2^-52)times2^1023018times10^309","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"在计算过程中，如果得到一个小于最小浮点数的数字，则会产生下溢错误。大于最大值的数字会产生上溢错误。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"Julia中上溢和下溢错误分别是正负无穷：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"julia> nextfloat((2.0-2^(-52))*2.0^1023)\nInf\n\njulia> prevfloat(-(2.0-2^(-52))*2.0^1023)\n-Inf","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"其运算方式与水银式温度计类似。","category":"page"},{"location":"ch01/#整数的表示方法","page":"第一章 程序设计与Julia","title":"整数的表示方法","text":"","category":"section"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"在前一节中，我们讨论了计算机中实数的表示方法。这里我们将简要讨论整数的表示方法。计算机如何表示整数n？与实数类似，我们以2为基数开始写n。我们有64位来表示它的有效数字和符号。与浮点数一样，我们为符号分配一位，将其余的63位用于有效数字。当对整数进行加法运算时，这种方法有一些缺点。另一种方法被称为二进制补码，它更常用，包括在Julia中。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"举个例子，假设我们的计算机是8位的。要用二进制补码表示12(或任何正整数)，只需将它写成以2为基数展开的形式：(00001100)_2。为了表示−12，我们做如下操作：翻转所有数位，用0替换1，用1替换0，然后在结果上加1。翻转数字12，我们得到(11110011)_2，加上1（二进制）得到(11110100)_2。因此，−12在二进制补码法中被表示为(11110100)_2。为了表示-12，费了那么大的功夫，感觉有点奇怪，但当把12和-12二进制表示相加时，这种表示方法的优势立刻显现：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"(00001100)_2+(11110100)_2=(textcolorred100000000)_2","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"这个和的前8位(从右到左)，也就是计算机能表示的(忽略红色数字1)，是(00000000)_2。所以就像以10为基数的12 +(- 12)= 0一样，这些数的表示形式的和也是0。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"我们可以用Julia实现64位的计算。函数bitstring输出一个整数的数位，对于负数使用二进制补码：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"julia> bitstring(12)\n\"0000000000000000000000000000000000000000000000000000000000001100\"\n\njulia> bitstring(-12)\n\"1111111111111111111111111111111111111111111111111111111111110100\"","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"你可以验证当截断到64位时，这些表示的和为0。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"下面是另一个说明二进制补码优点的例子。考虑−3和5的表现，","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"-3=(11111101)_2 和 5 =(00000101)_2","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"−3和5的和是2；那么它们表示形式的二进制和呢？我们有：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"(11111101)_2+(00000101)_2=(textcolorred100000010)_2","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"如果我们忽略红色的第9位，结果是(10)_2，结果也确实是2。注意，如果我们遵循浮点表示中使用的相同方法，并将最左边的位分配给整数的符号，就不会有这个属性。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"在二进制补码中，使用64位，可以表示2^63 =9223372036854775808和2^631 =9223372036854775807之间的整数。小于或大于这个范围的任何整数都会产生下溢或上溢错误。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"整数的溢出与浮点数有所不同，如下所示：","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"julia> typemax(Int64)\n9223372036854775807\n\njulia> typemin(Int64)\n-9223372036854775808\n\njulia> typemax(Int64) + 1\n-9223372036854775808\n\njulia> typemin(Int64) - 1\n9223372036854775807","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"当获得一个超过最大（或最小）可能值的整数时，Julia绕到最小（或最大）的整数，并继续计算。其运算方法与指针式钟表完全一样。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"","category":"page"},{"location":"ch01/#调试","page":"第一章 程序设计与Julia","title":"调试","text":"","category":"section"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"编程尤其是调试，有时是一件很挠头的事情。如果一个程序很难调试成功，你也许会感到愤怒，沮丧或是惭愧。通常，人们会把计算机当做人来看待，当他们工作出色时，我们会把他们当做队友，当他们难于控制或表现不佳（粗俗）时，我们对待他们的态度就像面对粗俗不羁的人一样。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"对这些情况思想上有所准备是一个好的处理方法。你可以将计算机想象为一个雇员，他精准高效，但缺乏感情，不具大局观。你的工作是成为一名好的管理者：找到使他发挥长处，避免弱点的方法。学习程序调试的过程往往是令人沮丧的，但它所带来的好处远不止编程！","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"","category":"page"},{"location":"ch01/#术语","page":"第一章 程序设计与Julia","title":"术语","text":"","category":"section"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"解决问题 :  对一个问题进行建模、求解和描述的过程。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"程序 : 实现一种计算的一系列指令。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"REPL : 一个程序，不断重复输入读取，计算执行和结果输出。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"提示符 : 一种字符，表明REPL正在等待用户输入。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"打印命令 : Julia REPL用来在屏幕上显示值的一条指令。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"运算符 : 代表加、减、乘、除或字符串连接等简单计算的一种符号。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"值 : 程序处理数据的基本单位之一，如数字或字符串。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"类型 : 值的类别。目前我们见过的类型有整形（Int64），浮点型（Float64）和字符串型（String）。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"整型 : 代表所有整数的类型。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"浮点型 : 代表有小数点的所有数的类型。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"字符串型 : 代表字符序列的类型。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"自然语言 : 人们使用的自然进化的任意一种语言。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"形式语言 : 人们为了特殊目的设计的任意一种语言，如数学语言，编程语言。所有程序语言都是形式语言。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"语法 : 规定程序结构的规则。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"标识 : 程序语法结构中基本元素之一，与自然语言中文字类似。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"结构 : 标识组合的方式。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"解析 : 对程序进行检验并分析语法结构。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"调试 : 寻找和改正程序中错误的过程。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"","category":"page"},{"location":"ch01/#习题","page":"第一章 程序设计与Julia","title":"习题","text":"","category":"section"},{"location":"ch01/#习题1-1","page":"第一章 程序设计与Julia","title":"习题1-1","text":"","category":"section"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"当你尝试一个新特性时，尽量多制造错误。例如，在\"Hello, World!\"程序中，如果你去掉其中一个引号会怎么样？如果两个都去掉呢？如果将 println 拼错会怎么样？","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"这些试验会帮助你记住你从书上学到的知识，当然对编程也很有益处，因为你会掌握错误信息的含义。现在故意制造一些错误远胜于以后意外发生错误。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"在打印命令中，去掉一个括号会怎么样，两个都去掉呢？\n如果你想打印一个字符串，去掉一个引号会怎么样，两个都去掉呢？\n你可以使用减号来表示一个负数，如 -2。如果你在一个数字前面加上加号会怎么样？2++2 的结果是什么？\n在数学表达中，可以保留数字前面的0，如 02。在Julia中尝试这种输入，看看会发生什么？\n如果两个数字之间没有运算符会怎么样？","category":"page"},{"location":"ch01/#习题1-2","page":"第一章 程序设计与Julia","title":"习题1-2","text":"","category":"section"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"启动Julia REPL，将它作为计算器使用。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"42分42秒是多少秒？\n10公里是多少英里？ ","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"1.61公里等于1英里。","category":"page"},{"location":"ch01/","page":"第一章 程序设计与Julia","title":"第一章 程序设计与Julia","text":"如果你用37分48秒跑了10公里，你的平均速度是多少（英里每分，英里每秒，英里每小时）？","category":"page"},{"location":"#Reference","page":"API Reference","title":"Reference","text":"","category":"section"},{"location":"","page":"API Reference","title":"API Reference","text":"This page has references to all the exported types and functions.","category":"page"},{"location":"#Types","page":"API Reference","title":"Types","text":"","category":"section"},{"location":"","page":"API Reference","title":"API Reference","text":"Point2D","category":"page"},{"location":"#Functions","page":"API Reference","title":"Functions","text":"","category":"section"},{"location":"","page":"API Reference","title":"API Reference","text":"ε\niscollinear","category":"page"}]
}
